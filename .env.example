# ========================================
# PostgreSQL 설정
# ========================================
# 데이터베이스 접속 비밀번호
POSTGRES_PASSWORD=change_this_secure_password_123

# ========================================
# Redis 설정
# ========================================
# Redis 접속 비밀번호
REDIS_PASSWORD=change_this_redis_password_456

# ========================================
# n8n 설정
# ========================================
# n8n 웹 UI 로그인 정보 (http://localhost:5679)
N8N_USER=admin
N8N_PASSWORD=change_this_n8n_password_789

# ========================================
# Binance API (시스템 레벨 테스트용 - Optional)
# ========================================
# ⚠️ 중요: 실제 유저의 API Key는 DB에 암호화되어 저장됩니다!
# 여기 있는 키는 시스템 테스트/개발용으로만 사용
# 테스트넷 API 키: https://testnet.binancefuture.com
BINANCE_TESTNET_KEY=your_testnet_api_key_for_system_testing
BINANCE_TESTNET_SECRET=your_testnet_api_secret_for_system_testing

# ========================================
# OpenAI API (AI Agents)
# ========================================
# GPT-4o, GPT-o1, GPT-4o-mini 사용 (https://platform.openai.com/api-keys)
OPENAI_API_KEY=sk-your-openai-api-key-here

# ========================================
# 보안 키 (필수!)
# ========================================
# ⚠️ 매우 중요: 유저의 Binance API Key를 DB에 암호화 저장할 때 사용
# 이 키가 없으면 유저 API Key를 복호화할 수 없습니다!
# 생성: openssl rand -hex 16
ENCRYPTION_KEY=your_32_character_encryption_key_here

# JWT 토큰 생성용 (로그인 세션)
# 생성: openssl rand -hex 32
JWT_SECRET_KEY=your_64_character_jwt_secret_key_here

# ========================================
# Grafana 설정
# ========================================
# Grafana 대시보드 로그인 정보 (http://localhost:3001)
GRAFANA_USER=admin
GRAFANA_PASSWORD=change_this_grafana_password_012

# ========================================
# Slack (Optional - 알림용)
# ========================================
# Slack Webhook URL (나중에 설정)
# 생성: https://api.slack.com/messaging/webhooks
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# ========================================
# 🔐 유저 API Key 저장 방식
# ========================================
# 1. 유저가 웹/API를 통해 자신의 Binance API Key 등록
# 2. ENCRYPTION_KEY로 암호화하여 users 테이블에 저장
#    - users.api_key_encrypted
#    - users.api_secret_encrypted
# 3. 거래 시 해당 유저의 암호화된 키를 DB에서 조회
# 4. ENCRYPTION_KEY로 복호화하여 사용
# 5. 메모리에서만 사용 후 즉시 폐기
#
# ⚠️ ENCRYPTION_KEY 유출 시:
#    - 모든 유저의 API Key가 위험해집니다
#    - 절대 Git에 커밋하지 마세요 (.gitignore 확인)
#    - 프로덕션에서는 환경변수나 Secret Manager 사용
